syntax = "proto3";

package meteringv2events;

option java_package = "com.cloudera.thunderhead.service.meteringv2.events";
option java_outer_classname = "MeteringV2EventsProto";


//
// The service types. Any new services added to CDP which will have their own
// billable events must be added here.
//
// This list below is a subset of the values in the Crn.Service enumeration.
// The exact value need not match, but it should correspond to some Crn.Service.
//
message ServiceType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // DataHub
    DATAHUB = 1;
    // Machine Learning
    MACHINE_LEARNING = 2;
    // Data Warehouse
    DATA_WAREHOUSE = 3;
    // Data Engineering
    DATA_ENGINEERING = 4;
    // Operational Database
    OPERATIONAL_DB = 5;
    // Data Flow
    DATA_FLOW = 6;
    // Environment, which contains one or multiple services
    ENVIRONMENT = 7;
    // Liftie, which is an internal service only
    LIFTIE = 8;
  }
}

//
// A metering event.
//
message MeteringEvent {
  //
  // The event's ID. This should be a unique ID generated by the client in
  // uuid v4 format. This is used on the server for detection of duplicate
  // events.
  //
  // e.g.: 4d4a1472-d5e3-464e-a763-e4bbb0d99a77
  //
  string id = 1;
  //
  // The event timestamp in ms from the epoch of 1970-01-01T00:00:00Z.
  // Note that epoch time is in UTC.
  //
  uint64 timestamp = 2;
  //
  // The version of this event model. Specifying a version other than 1
  // will result in version-specific validation checks by the Metering V2 service.
  //
  // Version notes:
  //  1: initial version
  //
  uint32 version = 3;
  //
  // Any cluster level service type.
  //
  ServiceType.Value serviceType = 4;
  //
  // Any cluster level service feature. This will be used to differentiate special features used in a workload.
  //
  string serviceFeature = 5;
  //
  // The resource CRN. Optional for events which are only tied to a workload resource (e.g. S3).
  //
  string resourceCrn = 6;
  //
  // The environment CRN. Optional for events which are not tied to an Environment (e.g. NAAF).
  //
  string environmentCrn = 7;
  //
  // The event payload.
  //
  oneof payload {
    Sync sync = 8;
    StatusChange statusChange = 9;
  }
}

//
// A list of MeteringEvent objects.
//
message MeteringEvents {
  repeated MeteringEvent events = 1;
}

// ========================================================================
// SECTION 1. Sync Event messages.
//
// These messages pertain to the sync events that would be generated.
// ========================================================================

//
// A sync event for one or more resources.
//
message Sync {
  repeated Resource resources = 1;
}

//
// A resource that is being tracked.
//
message Resource {
  //
  // The resource id
  //
  string id = 1;
  //
  // Any resource level service feature
  //
  string serviceFeature = 2;
  //
  // A message representing the type of resource being tracked.
  //
  oneof type {
    InstanceResource instanceResource = 3;
    ComputeResource computeResource = 4;
    NaafResource naafResource = 5;
    StorageResource storageResource = 6;
  }
}

//
// A metering cluster type resource.
//
message InstanceResource {
  //
  // Type
  //  - on AWS EC2, it might be: m5.4xlarge
  //  - on Azure, it might be STANDARD_D1
  //
  string instanceType = 1;
  //
  // Network address
  //
  string ipAddress = 2;
}

//
// A metered compute resource.
//
message ComputeResource {
  //
  // The number of vCores assigned to the compute resource. This may not be a
  // whole number. Please note, the relation between vCores and cores is 2:1.
  //
  // USAGE NOTES:
  // - If the value is <= 0, the event will be dropped
  //
  uint32 numCores = 1;
  //
  // The amount of memory assigned to the compute resource.
  //
  // USAGE NOTES:
  // - If the value is 0, the event will be dropped
  //
  double dbMem = 2;
}

//
// A metered NAAF resource.
//
message NaafResource {
  //
  // The raw number of nifi function invocations.
  //
  // USAGE NOTES:
  // - If the value is 0, the event will be dropped.
  //
  int32 count = 1;
  //
  // The number of nifi function invocations per second, calculated using the
  // following by NaaF Metering Pre Aggregation service for each invocation:
  //   ceiling(invocation-duration-milliseconds / 1000)
  //
  // This results in a billedInvocation of 1 or more for each invocation.
  // As a result, billedInvocations should always be >= count.
  // For example, if there are 8 invocations, each 100 milliseconds, the heartbeat
  // would indicate count = 8, billedInvocations = 8.
  // If there is 1 invocation that takes 1002 milliseconds, the heartbeat would
  // indicate count = 1, billedInvocations = 2.
  //
  // USAGE NOTES:
  // - If the value is 0, the event will be dropped.
  // - If the value is less than count, the event will be dropped.
  //
  int32 billedInvocations = 2;
  //
  // The event start timestamp in ms from the epoch of 1970-01-01T00:00:00Z.
  // Note that epoch time is in UTC.
  //
  // USAGE NOTES:
  // - If the end timestamp is less than the start timestamp, the event will
  // be dropped.
  //
  uint64 startTimestamp = 3;
  //
  // The event end timestamp in ms from the epoch of 1970-01-01T00:00:00Z.
  // Note that epoch time is in UTC.
  //
  // USAGE NOTES:
  // - If the end timestamp is less than the start timestamp, the event will
  // be dropped.
  //
  uint64 endTimestamp = 4;
}

//
// A metered storage resource.
//
message StorageResource {
  //
  // The storage type
  //
  StorageType.Value type = 1;
  //
  // The storage size in Megabytes.
  //
  double sizeInMB = 2;
  //
  // The optional description of the storage.
  //
  string description = 3;
}

//
// The storage types.
//
message StorageType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // AWS S3
    S3 = 1;
    // AWS EFS
    EFS = 2;
    // AWS EBS
    EBS = 3;
  }
}

// ========================================================================
// SECTION 2. Status Changed Event messages.
//
// These messages pertain to the status changed events that would be sent.
// ========================================================================

//
// An event sent when a group of resources has a change in billable state.
//
message StatusChange {
  //
  // The new status for the resource
  //
  ClusterStatus.Value status = 1;
  //
  // The set of resources involved in the change
  //
  repeated Resource resources = 2;
}

//
// The cluster status types.
//
message ClusterStatus {
  enum Value {
    // A cluster type resource has been scaled up.
    SCALE_UP = 0;
    // A cluster type resource has been scaled down.
    SCALE_DOWN = 1;
    // An existing resource has been stopped.
    STOPPED = 2;
    // An existing resource has been started.
    STARTED = 3;
    // A resource has been deleted.
    DELETED = 4;
    // A cluster type resource has been vertically scaled.
    // The instance type needs to be reported as part of the
    // existing instance type field. We do not need the old
    // instance type.
    VERTICAL_SCALE = 5;
  }
}